# Written by Jad Naous

<IfModule !mod_wsgi.c>
Error Missing mod_wsgi! Please install it.
</IfModule>

<Macro BasicAuth $authname $app_name $app_path>
    AuthType Basic
    AuthName "$authname"
    AuthBasicProvider wsgi
    WSGIAuthUserScript $app_path/src/wsgi/$app_name/auth.wsgi application-group=$app_name
    require valid-user
</Macro>

<Macro EmptyMacro>
    # Do nothing!
    # Dummy directive to avoid Apache complaining about empty contents
    #LogLevel warn
</Macro>

<Macro SingleWSGIDaemonProcess $app_name>
    WSGIDaemonProcess $app_name processes=1 threads=1 
</Macro>

<Macro MultiWSGIDaemonProcess $app_name>
    WSGIDaemonProcess $app_name processes=6 threads=6 user=www-data
</Macro>

<Macro WSGISetup $app_name $prefix $app_path $extra_dir_macro $wsgi_daemon>
    #LogLevel: {debug|info|warn}
    LogLevel warn

    WSGIScriptAlias $prefix $app_path/src/wsgi/$app_name/django.wsgi
    WSGIScriptAlias $prefixadmin $app_path/src/wsgi/$app_name/django.wsgi

    Use $wsgi_daemon $app_name
    WSGIProcessGroup $app_name

    # 2017-6-6. Require authentication to access / location
    <LocationMatch "/accounts/.*">
    Deny from all
    Allow from 84.88.32.0/21 84.88.40.0/23 147.83.0.0/16
    Satisfy any
    </LocationMatch>

    <Directory $app_path/src/wsgi/$app_name>
    Order allow,deny
    Allow from all
    # Require SSL be used
    SSLOptions +StrictRequire
    Use $extra_dir_macro
    </Directory>
</Macro>

<Macro SSLWSGIVHost $hostname $port $prefix $app_name $app_path $certs_path $extra_macro $extra_dir_macro>
<VirtualHost $hostname:$port>

	#  General setup for the virtual host
	DocumentRoot "$app_path/src/static/$app_name"

	ErrorLog /var/log/apache2/$app_name/error_log
	TransferLog /var/log/apache2/$app_name/access_log
	CustomLog /var/log/apache2/$app_name/ssl_request_log ssl_combined

    # 2017-6-6. Loose check on source IPs (forward acess to management UIs to AM APIs)
    RewriteEngine On
    RewriteCond %{REMOTE_ADDR} !^84\.88\.3[2-9]\.[0-9]{1,3}$
    RewriteCond %{REMOTE_ADDR} !^84\.88\.4[01]\.[0-9]{1,3}$
    RewriteCond %{REMOTE_ADDR} !^147\.83\.[0-9]{1,3}\.[0-9]{1,3}$
    RewriteRule ^(\/[accounts.*])$ /xmlrpc/geni/3/ [PT]

    # 2017-6-6. Require authentication to access / location (management UIs)
    <LocationMatch "/">
    Deny from all
    Allow from 84.88.32.0/21 84.88.40.0/23 147.83.0.0/16
    Satisfy any
    </LocationMatch>

    # 2013-03-01. Do not require authentication to access /xmlrpc/sfa/ location
    <LocationMatch "/xmlrpc/sfa/">
    Allow from all
    Satisfy any
    </LocationMatch>

    # 2014-10-8. Do not require authentication to access /xmlrpc/geni/3/ location
    <LocationMatch "/xmlrpc/geni/3/">
    Allow from all
    Satisfy any
    </LocationMatch>

    # Require authentication to access xmlrpc locations
    #<LocationMatch ".*[^(/open)]/xmlrpc/$">
    <LocationMatch "/xmlrpc/.*">
    Use BasicAuth "RPC Auth" $app_name $app_path
    </LocationMatch>

    Alias $prefixstatic $app_path/src/static/$app_name
    
    <Directory $app_path/src/static/$app_name>
    Order deny,allow
    Allow from all
    </Directory>

	Alias $prefixadmin/media /usr/lib/python2.6/site-packages/django/contrib/admin/media
    
    <Location $prefixadmin/media>
    Order deny,allow
    Allow from all
    </Location>
	
#	Alias /favicon.ico $app_path/src/static/$app_name/media/default/img/favicon.ico

	Use WSGISetup $app_name $prefix $app_path $extra_dir_macro MultiWSGIDaemonProcess

	Use $extra_macro

	#   SSL Engine Switch:
	#   Enable/Disable SSL for this virtual host.
	SSLEngine on

        # Avoid unsafe versions of SSL
        #SSLProtocol ALL -SSLv2
        SSLProtocol All -SSLv2 -SSLv3
        #SSLProxyProtocol ALL -SSLv2
        SSLProxyProtocol All -SSLv2 -SSLv3

	# Get SSL vars such as REMOTE_USER
	SSLOptions +StdEnvVars
	# Get the certs too
	SSLOptions +ExportCertData

	# Get the username from the client ceritificate when present
	SSLUserName SSL_CLIENT_S_DN_CN
	
	#   SSL Cipher Suite:
	#   List the ciphers that the client is permitted to negotiate.
	#   See the mod_ssl documentation for a complete list.
	SSLCipherSuite HIGH:MEDIUM:!aNULL:+SHA1:+MD5:+HIGH:+MEDIUM

	#   Server Certificate:
	#   Point SSLCertificateFile at a PEM encoded certificate.  If
	#   the certificate is encrypted, then you will be prompted for a
	#   pass phrase.  Note that a kill -HUP will prompt again.  Keep
	#   in mind that if you have both an RSA and a DSA certificate you
	#   can configure both in parallel (to also allow the use of DSA
	#   ciphers, etc.)
	SSLCertificateFile $certs_path/ssl.crt/server.crt

	#   Server Private Key:
	#   If the key is not combined with the certificate, use this
	#   directive to point at the key file.  Keep in mind that if
	#   you've both a RSA and a DSA private key you can configure
	#   both in parallel (to also allow the use of DSA ciphers, etc.)
	SSLCertificateKeyFile $certs_path/ssl.key/server.key

	#   Server Certificate Chain:
	#   Point SSLCertificateChainFile at a file containing the
	#   concatenation of PEM encoded CA certificates which form the
	#   certificate chain for the server certificate. Alternatively
	#   the referenced file can be the same as SSLCertificateFile
	#   when the CA certificates are directly appended to the server
	#   certificate for convenience.
	SSLCertificateChainFile $certs_path/ssl.crt/ca.crt

	#   Certificate Authority (CA):
	#   Set the CA certificate verification path where to find CA
	#   certificates for client authentication or alternatively one
	#   huge file containing all of them (file must be PEM encoded)
	#   Note: Inside SSLCACertificatePath you need hash symlinks
	#         to point to the certificate files. Use the provided
	#         Makefile to update the hash symlinks after changes.
	#SSLCACertificatePath $certs_path/ssl.crt
	#SSLCACertificatePath $certs_path/ssl.crt/ca_clients

	#   All-in-one file for CA that issue incoming certificates (e.g. AMs):
	#   This directive sets the all-in-one file where you can assemble
	#   the Certificates of Certification Authorities (CA) whose
	#   clients you deal with. These are used for Client Authentication.
	#   Such a file is simply the concatenation of the various PEM-encoded
	#   Certificate files, in order of preference. This can be used
	#   alternatively and/or additionally to SSLCACertificatePath.
	#   See: http://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslcacertificatefile
	SSLCACertificateFile $certs_path/ssl.crt/ca_clients.crt

	#   Certificate Revocation Lists (CRL):
	#   Set the CA revocation path where to find CA CRLs for client
	#   authentication or alternatively one huge file containing all
	#   of them (file must be PEM encoded)
	#   Note: Inside SSLCARevocationPath you need hash symlinks
	#         to point to the certificate files. Use the provided
	#         Makefile to update the hash symlinks after changes.
	SSLCARevocationPath $certs_path/ssl.crl

	#   Client Authentication (Type):
	#   Client certificate verification type and depth.  Types are
	#   none, optional, require and optional_no_ca.  Depth is a
	#   number which specifies how deeply to verify the certificate
	#   issuer chain before deciding the certificate is not valid.
	SSLVerifyClient optional
	SSLVerifyDepth  10

	SetEnvIf User-Agent ".*MSIE.*" \
		 nokeepalive ssl-unclean-shutdown \
		 downgrade-1.0 force-response-1.0

</VirtualHost>
</Macro>

<Macro SimpleSSLWSGIVHost $port $app_name $app_path>
    # Macro to use opensuse defaults for most things
    Use SSLWSGIVHost "_default_" $port "/" $app_name $app_path /etc/apache2 EmptyMacro EmptyMacro
</Macro>

<Macro SSLWSGIVHostVT $hostname $port $prefix $app_name $app_path $certs_path $extra_macro $extra_dir_macro>

<VirtualHost $hostname:$port>

    #  General setup for the virtual host
    #DocumentRoot "$app_path/src/static/$app_name"
    #DocumentRoot "$app_path/src/static2/$app_name"
    DocumentRoot "$app_path/src/python/$app_name/views/static"

    ErrorLog /var/log/apache2/$app_name/error_log
    TransferLog /var/log/apache2/$app_name/access_log
    CustomLog /var/log/apache2/$app_name/ssl_request_log ssl_combined

    # 2017-6-6. Loose check on source IPs (forward acess to management UIs to AM APIs)
    RewriteEngine On
    RewriteCond %{REMOTE_ADDR} !^84\.88\.3[2-9]\.[0-9]{1,3}$
    RewriteCond %{REMOTE_ADDR} !^84\.88\.4[01]\.[0-9]{1,3}$
    RewriteCond %{REMOTE_ADDR} !^147\.83\.[0-9]{1,3}\.[0-9]{1,3}$
    RewriteRule ^(\/[accounts.*])$ /xmlrpc/geni/3/ [PT]

    # 2017-6-6. Require authentication to access / location
    <LocationMatch "/">
    Deny from all
    Allow from 84.88.32.0/21 84.88.40.0/23 147.83.0.0/16
    Satisfy any
    </LocationMatch>

    <LocationMatch "/xmlrpc/sfa/">
    Allow from all
    Satisfy any
    </LocationMatch>

     # 2014-10-8. Do not require authentication to access /xmlrpc/geni/3/ location
    <LocationMatch "/xmlrpc/geni/3/">
    Allow from all
    Satisfy any
    </LocationMatch>

    # Require authentication to access xmlrpc locations
    <LocationMatch "/xmlrpc/.*">
    Use BasicAuth "RPC Auth" $app_name $app_path
    </LocationMatch>

    #Alias $prefixstatic $app_path/src/static/$app_name
    #Alias $prefixstatic $app_path/src/static2/$app_name
    Alias $prefixstatic $app_path/src/python/$app_name/views/static

    #<Directory $app_path/src/static/$app_name>
    #<Directory $app_path/src/static2/$app_name>
    <Directory $app_path/src/python/$app_name/views/static>
    Order deny,allow
    Allow from all
    </Directory>

    Alias $prefixadmin/media /usr/lib/python2.6/site-packages/django/contrib/admin/media

    <Location $prefixadmin/media>
    Order deny,allow
    Allow from all
    </Location>

    Use WSGISetup $app_name $prefix $app_path $extra_dir_macro MultiWSGIDaemonProcess

    Use $extra_macro

    #   SSL Engine Switch:
    #   Enable/Disable SSL for this virtual host.
    SSLEngine on

    # Avoid unsafe versions of SSL
    #SSLProtocol ALL -SSLv2
    SSLProtocol All -SSLv2 -SSLv3
    #SSLProxyProtocol ALL -SSLv2
    SSLProxyProtocol All -SSLv2 -SSLv3

# Get SSL vars such as REMOTE_USER
    SSLOptions +StdEnvVars
    # Get the certs too
    SSLOptions +ExportCertData

    # Get the username from the client ceritificate when present
    SSLUserName SSL_CLIENT_S_DN_CN

    #   SSL Cipher Suite:
    #   List the ciphers that the client is permitted to negotiate.
    #   See the mod_ssl documentation for a complete list.
    SSLCipherSuite HIGH:MEDIUM:!aNULL:+SHA1:+MD5:+HIGH:+MEDIUM

    #   Server Certificate:
    #   Point SSLCertificateFile at a PEM encoded certificate.  If
    #   the certificate is encrypted, then you will be prompted for a
    #   pass phrase.  Note that a kill -HUP will prompt again.  Keep
    #   in mind that if you have both an RSA and a DSA certificate you
    #   can configure both in parallel (to also allow the use of DSA
    #   ciphers, etc.)
    SSLCertificateFile $certs_path/ssl.crt/server.crt

    #   Server Private Key:
    #   If the key is not combined with the certificate, use this
    #   directive to point at the key file.  Keep in mind that if
    #   you've both a RSA and a DSA private key you can configure
    #   both in parallel (to also allow the use of DSA ciphers, etc.)
    SSLCertificateKeyFile $certs_path/ssl.key/server.key

    #   Server Certificate Chain:
    #   Point SSLCertificateChainFile at a file containing the
    #   concatenation of PEM encoded CA certificates which form the
    #   certificate chain for the server certificate. Alternatively
    #   the referenced file can be the same as SSLCertificateFile
    #   when the CA certificates are directly appended to the server
    #   certificate for convenience.
    SSLCertificateChainFile $certs_path/ssl.crt/ca.crt

    #   Certificate Authority (CA):
    #   Set the CA certificate verification path where to find CA
    #   certificates for client authentication or alternatively one
    #   huge file containing all of them (file must be PEM encoded)
    #   Note: Inside SSLCACertificatePath you need hash symlinks
    #         to point to the certificate files. Use the provided
    #         Makefile to update the hash symlinks after changes.
    #SSLCACertificatePath $certs_path/ssl.crt
    #SSLCACertificatePath $certs_path/ssl.crt/ca_clients

    #   All-in-one file for CA that issue incoming certificates (e.g. AMs):
    #   This directive sets the all-in-one file where you can assemble
    #   the Certificates of Certification Authorities (CA) whose
    #   clients you deal with. These are used for Client Authentication.
    #   Such a file is simply the concatenation of the various PEM-encoded
    #   Certificate files, in order of preference. This can be used
    #   alternatively and/or additionally to SSLCACertificatePath.
    #   See: http://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslcacertificatefile
    SSLCACertificateFile $certs_path/ssl.crt/ca_clients.crt

    #   Certificate Revocation Lists (CRL):
    #   Set the CA revocation path where to find CA CRLs for client
    #   authentication or alternatively one huge file containing all
    #   of them (file must be PEM encoded)
    #   Note: Inside SSLCARevocationPath you need hash symlinks
    #         to point to the certificate files. Use the provided
    #         Makefile to update the hash symlinks after changes.
    SSLCARevocationPath $certs_path/ssl.crl

    #   Client Authentication (Type):
    #   Client certificate verification type and depth.  Types are
    #   none, optional, require and optional_no_ca.  Depth is a
    #   number which specifies how deeply to verify the certificate
    #   issuer chain before deciding the certificate is not valid.
    SSLVerifyClient optional
    SSLVerifyDepth  10

    SetEnvIf User-Agent ".*MSIE.*" \
         nokeepalive ssl-unclean-shutdown \
         downgrade-1.0 force-response-1.0

</VirtualHost>
</Macro>

<Macro SimpleSSLWSGIVHostVT $port $app_name $app_path>
    # Macro to use opensuse defaults for most things
    Use SSLWSGIVHostVT "_default_" $port "/" $app_name $app_path /etc/apache2 EmptyMacro EmptyMacro
</Macro>

